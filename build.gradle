// Allow selecting OrientDB and Groovy from the commandline
def groovyVersion = project.hasProperty("GV") ? GV : '2.4.5'
def orientVersion = project.hasProperty('OV') ? OV : '2.1.22' // '2.1.20'

apply plugin: 'groovy'
// apply plugin: 'application'

repositories {
    mavenCentral()
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    compile ( "com.orientechnologies:orientdb-graphdb:${orientVersion}" ) {
        exclude module:'commons-logging'
    }
    compile "com.tinkerpop.gremlin:gremlin-groovy:2.6.0"

    compile 'org.apache.commons:commons-math3:3.5'
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'ch.qos.logback:logback-classic:1.1.3'
    compile 'org.slf4j:jul-to-slf4j:1.7.20'

    runtime 'org.slf4j:jcl-over-slf4j:1.7.12'
    runtime 'org.slf4j:log4j-over-slf4j:1.7.12'
}

ext {
    javaVersionx = System.getProperty( 'java.version' )

    bugs = [
        bug1: [ main: 'com.akonizo.orientdb.bugs.ODocumentBug', args: [] ],
        bug2: [ main: 'com.akonizo.orientdb.bugs.VertexMapBug', args: [] ],
        bug3: [ main: 'com.akonizo.orientdb.bugs.RemoteServerSchemaBug', args: [] ],
        bug4: [ main: 'com.akonizo.orientdb.bugs.RemoteServerSelectAndUpdateBug', args: [ 'size' ] ],
        bug5: [ main: 'com.akonizo.orientdb.bugs.OFunctionIndexingBug', args: [ 'OV' ] ],
        bug6: [ main: 'com.akonizo.orientdb.bugs.OCompositeKeyBug', args: [] ],
    ]
}

// Add tasks for bugs, and collect commandline arguments

allprojects { Project p ->
    bugs.each { String name, Map parms ->
        JavaExec t = tasks.create(name, JavaExec)
        t.main = parms['main']
        t.description = parms['main']
        t.group = 'application'
        t.classpath = p.sourceSets.main.runtimeClasspath
        def argList = []
        parms['args'].each { String argName ->
            if (project.hasProperty(argName)) {
                argList << project.properties[argName]
            }
        }
        t.args = argList
    }
}

// Ensure everything's using the same version of Groovy
configurations.all {
    resolutionStrategy.eachDependency { DependencyResolveDetails details ->
        if (details.requested.group == 'org.codehaus.groovy') {
            details.useVersion groovyVersion.split(':')[0]
        }
    }
}

/*
 * Load external build scripts
 */
apply from: 'tools.gradle'
